#-------------------------------------------------------------------
# modified from https://bitbucket.org/dark_sylinc/dergo-blender/src/bd5199ee77e5d7325c84f984a33c28f2d744c2ec/DERGO_Server/CMake/dependencies/OGRE.cmake?at=default&fileviewer=file-view-default
#-------------------------------------------------------------------

macro( findPluginAndSetPath BUILD_TYPE CFG_VARIABLE LIBRARY_NAME )
    set( REAL_LIB_PATH ${LIBRARY_NAME} )
    if( ${BUILD_TYPE} STREQUAL "Debug" )
        set( REAL_LIB_PATH ${REAL_LIB_PATH}_d )
    endif()

    if( WIN32 )
        set( REAL_LIB_PATH "${OGRE_BINARIES}/bin/${BUILD_TYPE}/${REAL_LIB_PATH}.dll" )
    else()
        set( REAL_LIB_PATH "${OGRE_BINARIES}/lib/${REAL_LIB_PATH}.so" )
    endif()

    if( EXISTS ${REAL_LIB_PATH} )
        # DLL Exists, set the variable for Plugins.cfg
        if( ${BUILD_TYPE} STREQUAL "Debug" )
            message(STATUS "add _d for debug")
            set( ${CFG_VARIABLE} "Plugin=${LIBRARY_NAME}_d" )
        else()
            set( ${CFG_VARIABLE} "Plugin=${LIBRARY_NAME}" )
        endif()

        # On Windows, copy the DLLs to the folders.
        if( WIN32 )
            file( COPY ${REAL_LIB_PATH} DESTINATION "${CMAKE_SOURCE_DIR}/bin/${BUILD_TYPE}/Plugins" )
        endif()
    else()
        Message(FATAL_ERROR "${REAL_LIB_PATH} not found")
    endif()
endmacro()

macro( setupPluginFileFromTemplate BUILD_TYPE )
    if( NOT UNIX )
        file( MAKE_DIRECTORY "${CMAKE_SOURCE_DIR}/bin/${BUILD_TYPE}/Plugins" )
    endif()

    findPluginAndSetPath( ${BUILD_TYPE} OGRE_PLUGIN_RS_GL3Plus  RenderSystem_GL3Plus )
    findPluginAndSetPath( ${BUILD_TYPE} OGRE_PLUGIN_PARTICLE_FX Plugin_ParticleFX )

    IF(CMAKE_BUILD_TYPE STREQUAL "Debug")
        configure_file( ${CMAKE_SOURCE_DIR}/cmake/Templates/plugins.cfg.in ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/plugins.cfg )
    ELSE() 
        configure_file( ${CMAKE_SOURCE_DIR}/cmake/Templates/plugins_d.cfg.in ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/plugins_d.cfg )
    ENDIF()

    if( WIN32 )
        # Copy standard DLLs
        if( NOT ${BUILD_TYPE} STREQUAL "Debug" )
            if( EXISTS "${OGRE_BINARIES}/bin/${BUILD_TYPE}/OgreMain.dll" )
                file( COPY "${OGRE_BINARIES}/bin/${BUILD_TYPE}/OgreMain.dll"        DESTINATION "${CMAKE_SOURCE_DIR}/bin/${BUILD_TYPE}" )
            endif()
        else()
            if( EXISTS "${OGRE_BINARIES}/bin/${BUILD_TYPE}/OgreMain_d.dll" )
                file( COPY "${OGRE_BINARIES}/bin/${BUILD_TYPE}/OgreMain_d.dll"      DESTINATION "${CMAKE_SOURCE_DIR}/bin/${BUILD_TYPE}" )
            endif()
        endif()
    endif()

    unset( OGRE_PLUGIN_RS_D3D11 )
    unset( OGRE_PLUGIN_RS_GL3PLUS )
endmacro()


macro( setupOgre )
    #set up OGRE_SOURCE, OGRE_BINARIES,  OGRE_LIBRARIES, OGRE_INCLUDE_DIRS, OGRE_SAMPLES_INCLUDE_DIRS, OGRE_SAMPLES_LIBRARIES

    # Guess the paths.
    set(OGRE_SOURCE "${OGRE_SOURCE_DIR}" CACHE STRING "Path to OGRE source code" )
    set(OGRE_TEMPLATE_DIR ${OGRE_SOURCE}/CMake/Templates)
    set(OGRE_SAMPLE_MEDIA ${OGRE_SOURCE}/Samples/Media)
    if( WIN32 )
        set( OGRE_BINARIES "${OGRE_SOURCE}/build/gcc/${CMAKE_BUILD_TYPE}" CACHE STRING "Path to OGRE's build folder generated by CMake" )
        link_directories( "${OGRE_BINARIES}/lib/$(ConfigurationName)" )
    else()
        set( OGRE_BINARIES "${OGRE_SOURCE}/build/gcc/${CMAKE_BUILD_TYPE}" CACHE STRING "Path to OGRE's build folder generated by CMake" )
        link_directories( "${OGRE_BINARIES}/lib" )
    endif()

    list(APPEND OGRE_INCLUDE_DIRS "${OGRE_SOURCE}/OgreMain/include")
    list(APPEND OGRE_INCLUDE_DIRS "${OGRE_SOURCE}/Components/Hlms/Common/include")
    list(APPEND OGRE_INCLUDE_DIRS "${OGRE_SOURCE}/Components/Hlms/Unlit/include")
    list(APPEND OGRE_INCLUDE_DIRS "${OGRE_SOURCE}/Components/Hlms/Pbs/include")
    list(APPEND OGRE_INCLUDE_DIRS "${OGRE_SOURCE}/Components/Overlay/include")
    list(APPEND OGRE_INCLUDE_DIRS "${OGRE_SOURCE}/Components")
    list(APPEND OGRE_INCLUDE_DIRS "${OGRE_BINARIES}/include")

    set(OGRE_LIBRARIES
        debug OgreMain_d
        debug OgreHlmsPbs_d
        debug OgreHlmsUnlit_d
        debug OgreOverlay_d
        optimized OgreMain
        optimized OgreHlmsPbs
        optimized OgreHlmsUnlit
        optimized OgreOverlay
        )
    #sample
    set(OGRE_SAMPLES_INCLUDE_DIRS ${OGRE_SOURCE}/Samples/2.0/Common/include/)
    set(OGRE_SAMPLES_LIBRARIES
        debug OgreSamplesCommon_d
        optimized OgreSamplesCommon
        )

endmacro()

macro(setupOgreSdk)
    set(OGRE_SOURCE ${OGRE_SOURCE_DIR})
    set(OGRE_BINARIES "${OGRE_SOURCE}/build/gcc/${CMAKE_BUILD_TYPE}" CACHE STRING "Path to OGRE's build folder generated by CMake" )

    IF(NOT EXISTS ${OGRE_BINARIES})
        message(FATAL_ERROR "OGRE_BINARIES:${OGRE_BINARIES} doesn't exists, you need to set it manually") 
    ENDIF()

    set(OGRE_SAMPLE_MEDIA ${OGRE_SOURCE}/Samples/Media)
    if (EXISTS ${OGRE_SOURCE_DIR}/CMake)
        MESSAGE(STATUS "Original FindOGRE.cmake found in OGRE_SOURCE_DIR, trying to use it")
        set(OGRE_TEMPLATE_DIR ${OGRE_SOURCE}/CMake/Templates)
        set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${OGRE_SOURCE_DIR}/CMake  ${OGRE_SOURCE_DIR}/CMake/Packages ${OGRE_SOURCE_DIR}/CMake/Utils)
        FIND_PACKAGE(OGRE REQUIRED)
    else()
        FIND_PACKAGE(OGRE REQUIRED)
    endif()

    FIND_PACKAGE(SDL2 REQUIRED)

    set(OGRE_LIBRARIES ${OGRE_LIBRARIES} ${OGRE_HlmsPbs_LIBRARIES} ${OGRE_HlmsUnlit_LIBRARIES} ${SDL2_LIBRARY} ${OGRE_Overlay_LIBRARIES})
    set(OGRE_SAMPLES_LIBRARIES 
        debug ${OGRE_BINARIES}/lib/libOgreSamplesCommon_d.a
        optimized ${OGRE_BINARIES}/lib/libOgreSamplesCommon.a)
    set(OGRE_SAMPLES_INCLUDE_DIRS ${OGRE_SOURCE}/Samples/2.0/Common/include)

    #config plugins
    if (NOT OGRE_BUILD_RENDERSYSTEM_D3D11)
        set(OGRE_COMMENT_RENDERSYSTEM_D3D11 "#")
    endif ()
    if (CMAKE_SYSTEM_VERSION VERSION_LESS "6.0")
        set(OGRE_COMMENT_RENDERSYSTEM_D3D11 "#")
    endif ()
    if (NOT OGRE_BUILD_RENDERSYSTEM_GL3PLUS)
        set(OGRE_COMMENT_RENDERSYSTEM_GL3PLUS "#")
    endif ()
    if (NOT OGRE_BUILD_RENDERSYSTEM_GLES)
        set(OGRE_COMMENT_RENDERSYSTEM_GLES "#")
    endif ()
    if (NOT OGRE_BUILD_RENDERSYSTEM_GLES2)
        set(OGRE_COMMENT_RENDERSYSTEM_GLES2 "#")
    endif ()
    if (NOT OGRE_BUILD_PLUGIN_PFX)
        set(OGRE_COMMENT_PLUGIN_PARTICLEFX "#")
    endif ()
    if (NOT OGRE_BUILD_PLUGIN_CG)
        set(OGRE_COMMENT_PLUGIN_CG "#")
    endif ()
    if (NOT OGRE_BUILD_COMPONENT_TERRAIN)
        set(OGRE_COMMENT_COMPONENT_TERRAIN "#")
    endif ()
    if (NOT OGRE_BUILD_COMPONENT_RTSHADERSYSTEM)
        set(OGRE_COMMENT_COMPONENT_RTSHADERSYSTEM "#")
    endif ()
    if (NOT OGRE_BUILD_COMPONENT_VOLUME)
        set(OGRE_COMMENT_COMPONENT_VOLUME "#")
    endif ()
    if (NOT OGRE_BUILD_COMPONENT_TERRAIN OR NOT OGRE_BUILD_COMPONENT_PAGING)
        set(OGRE_COMMENT_SAMPLE_ENDLESSWORLD "#")
    endif ()

    IF(CMAKE_BUILD_TYPE STREQUAL "Debug")
        configure_file( ${CMAKE_SOURCE_DIR}/cmake/Templates/plugins_d.cfg.in ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/plugins_d.cfg )
    ELSE() 
        configure_file( ${CMAKE_SOURCE_DIR}/cmake/Templates/plugins.cfg.in ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/plugins.cfg )
    ENDIF()
    configure_file(${CMAKE_SOURCE_DIR}/cmake/Templates/resources2.cfg.in ${CMAKE_CURRENT_BINARY_DIR}/resources2.cfg @ONLY)

    include_directories(
        ${OGRE_Plugin_ParticleFX_INCLUDE_DIRS}
        ${OGRE_RenderSystem_GL3Plus_INCLUDE_DIRS}
        ${OGRE_RenderSystem_Direct3D9_INCLUDE_DIRS}
        ${OGRE_RenderSystem_Direct3D11_INCLUDE_DIRS}
        ${OGRE_RenderSystem_GL3Plus_INCLUDE_DIRS}
        ${OGRE_Overlay_INCLUDE_DIRS}
        ${OGRE_HlmsPbs_INCLUDE_DIRS}
        ${OGRE_HlmsUnlit_INCLUDE_DIRS}
        ${OGRE_SAMPLES_INCLUDE_DIRS}
        ${SDL2_INCLUDE_DIR}
        )
endmacro()

macro(setupOgrePlugins)
    # Plugins.cfg

    ##message( STATUS "Copying Hlms data files from Ogre repository" )
    #file( COPY "${OGRE_SOURCE}/Samples/Media/Hlms/Common"   DESTINATION "${CMAKE_SOURCE_DIR}/media/Hlms" )
    #file( COPY "${OGRE_SOURCE}/Samples/Media/Hlms/Pbs"      DESTINATION "${CMAKE_SOURCE_DIR}/media/Hlms" )
    #file( COPY "${OGRE_SOURCE}/Samples/Media/Hlms/Unlit"    DESTINATION "${CMAKE_SOURCE_DIR}/media/Hlms" )
    #file( COPY "${OGRE_SOURCE}/Samples/Media/packs" DESTINATION "${CMAKE_SOURCE_DIR}/media/" )
    #file( COPY "${OGRE_SOURCE}/Samples/Media/2.0/scripts/Compositors"   DESTINATION "${CMAKE_SOURCE_DIR}/media/scripts/" )
    #file( COPY "${OGRE_SOURCE}/Samples/Media/2.0/scripts/materials" DESTINATION "${CMAKE_SOURCE_DIR}/media/scripts/" )
    #file( COPY "${OGRE_SOURCE}/Samples/Media/materials/textures"    DESTINATION "${CMAKE_SOURCE_DIR}/media/" )
    #file( COPY "${OGRE_SOURCE}/Samples/Media/models"    DESTINATION "${CMAKE_SOURCE_DIR}/media/" )
    message( STATUS "Copying DLLs and generating Plugins.cfg for ${CMAKE_BUILD_TYPE}" )
    setupPluginFileFromTemplate( ${CMAKE_BUILD_TYPE} )
    message( STATUS "Copying DLLs and generating Plugins.cfg for Release" )
    setupPluginFileFromTemplate( "Release" )
    message( STATUS "Copying DLLs and generating Plugins.cfg for RelWithDebInfo" )
    setupPluginFileFromTemplate( "RelWithDebInfo" )
    message( STATUS "Copying DLLs and generating Plugins.cfg for MinSizeRel" )
    setupPluginFileFromTemplate( "MinSizeRel" )
endmacro()
